{"ast":null,"code":"var _jsxFileName = \"/Users/tateyamaaozora/react-guide-material/04_react_basic/src/087_practice_expr/end/Example.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst title = 'Expression';\nconst array = ['item1', 'item2', 'item3'];\n\nconst fn = arg => {\n  return `${arg} Function`;\n};\n\nconst upperCaseText = 'upperCaseText';\n\nconst Example = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Hello JSX\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: upperCaseText.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: 'Hello ' + title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: array\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: fn('Hello')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Example;\nexport default Example;\n\nvar _c;\n\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"names":["title","array","fn","arg","upperCaseText","Example","toUpperCase"],"sources":["/Users/tateyamaaozora/react-guide-material/04_react_basic/src/087_practice_expr/end/Example.js"],"sourcesContent":["const title = 'Expression';\nconst array = ['item1', 'item2', 'item3'];\nconst fn = (arg) => {\n  return `${arg} Function`;\n};\nconst upperCaseText = 'upperCaseText';\n\nconst Example = () => {\n  return (\n    <>\n      <h3>Hello JSX</h3>\n      {/* toUpperCaseメソッドで文字列をすべて大文字にします。 */}\n      <h3>{upperCaseText.toUpperCase()}</h3>\n      {/* +演算子で文字列を結合します。 */}\n      <h3>{'Hello ' + title}</h3>\n      {/* 配列がJSX内で渡されると自動的に要素が展開されて表示されます。 */}\n      <h3>{array}</h3>\n      {/* 関数の実行はreturnに続く値が返ってきます。 */}\n      <h3>{fn('Hello')}</h3>\n    </>\n  );\n};\n\nexport default Example;\n"],"mappings":";;;AAAA,MAAMA,KAAK,GAAG,YAAd;AACA,MAAMC,KAAK,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAd;;AACA,MAAMC,EAAE,GAAIC,GAAD,IAAS;EAClB,OAAQ,GAAEA,GAAI,WAAd;AACD,CAFD;;AAGA,MAAMC,aAAa,GAAG,eAAtB;;AAEA,MAAMC,OAAO,GAAG,MAAM;EACpB,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAGE;MAAA,UAAKD,aAAa,CAACE,WAAd;IAAL;MAAA;MAAA;MAAA;IAAA,QAHF,eAKE;MAAA,UAAK,WAAWN;IAAhB;MAAA;MAAA;MAAA;IAAA,QALF,eAOE;MAAA,UAAKC;IAAL;MAAA;MAAA;MAAA;IAAA,QAPF,eASE;MAAA,UAAKC,EAAE,CAAC,OAAD;IAAP;MAAA;MAAA;MAAA;IAAA,QATF;EAAA,gBADF;AAaD,CAdD;;KAAMG,O;AAgBN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}